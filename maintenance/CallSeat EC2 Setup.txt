Setting up the Amazon EC2 instance.
1) Go to the amazon AWS website

2) Under EC2 Dashboard

    2.1) Create an Elastic IP (If there already exists one that you can reuse, then use it)
        2.1.1) Network and Security > Elastic IP > Allocate New Address
        2.1.2) Select in drop down EC2 > Click yes Allocate
        2.1.3) Note down this IP address
                example: 23.23.45.213

    2.2) Create EC2 Instance - Goto EC2 Dashboard
        2.2.1) Launch Instance
        2.2.2) Classic Wizard > Ubuntu Server 12.04.1 LTS (32 bits) > Ec2 Classic, Availaibity Zone(No Preference) (select size of instance) > Continue
        2.2.3) Userdata > add the following
                example : elastic-ip=<ELASTIC IP>|hostname=<HOST NAME OF INSTANCE>
                          elastic-ip=23.23.45.213|hostname=callseat
        2.2.4) Click Continue >Select default volume > Select security key > Select firewall settings > Go through Overview> Select Launch
                Above steps can further be broken down for further details and fine tuning. Fornow we assume you are creating
                default instance.
        2.2.5) The security key above is necessary for SSHing into the instance.

    2.3) Associate Elastic IP
        2.3.1) Under EC2 Instance - Make sure the instance has a name for convenience sake.
        2.3.2) Network and Security > Elastic IP > Select the IP address
        2.3.3) Click Associate Address > from drop down select the instance > Yes associate
        2.3.4) Now Instance will always have an IP address.
               Warning : Every time EC2 instance is restarted, the IP address get unallocated.
                         We write a script which uses information from step 2.2.3) to allocate the IP address automatically when instance restarts.

    2.4) SSH into the instance (This will work only with the PEM file an instance is currently running)
        2.4.1) You will need the security key (Pem file) that you generated in step 2.2.4)
        2.4.2) ssh -i <pemfile_path> ubuntu@<Elastic IP>


    2.5) Install Java (cannot be donaloded directly as it requires authorization cookie)
        2.5.1) Google to Java SE download page using Chrome of Firefox with Firebug
        2.5.2) Accept Licence > Click on the version you want to download > Open Chrome webkit and find the link with the Authtoken.
        2.5.3) This link should have "Authorization token"
                   ex : http://download.oracle.com/otn-pub/java/jdk/7u17-b02/jdk-7u17-linux-i586.tar.gz?AuthParam=1363323229_bc58a018e01b0a81fc8130d890960490
        2.5.4) execute :  wget <URL>
        2.5.5) extract folder
        2.5.6) set JAVA_HOME and JRE_HOME in /etc/profile
                in file : /etc/profile
                export JAVA_HOME=/usr/local/java
                export JRE_HOME=/usr/local/java/jre
                export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME
        2.5.7) change user and group to root (recursively to sub folders as well)
                chown -R root java
                chgrp -R root java

    2.6) Generate Access Credentials (Access Keys and X509 Certificate)
        2.6.1) From Ec2 Dash Board > Click Username(top menu) > Security Credentials
        2.6.2) Under "Access Keys" > Create New Access Key > rename to pk.pem
        2.6.3) Under X509 Certificate > Create New certificate > rename to cert.pem
        3.6.4) Keep in secure location


    2.7) Install EC2 tools in the Instance (Requires step 2.6 to be completed)
        2.7.1) Download the Ec2 tools into the Instance using wget. (Link for tools can be got from here http://aws.amazon.com/developertools/351)
        2.7.2) The above page will haev a link to the "S3" location where it is located.
        2.7.3) sudo wget http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip&token=A80325AA4DAB186C80828ED5138633E3F49160D9
                Note: The link might be different. Always get latest.
        2.7.4) Extract the file from the ZIP. Rename folder to "ec2-tools"
        2.7.5) Note down the full path. ex: /usr/local/ec-tools
        2.7.6) Copy the two files from step 2.6 into /usr/local/ec-tools (use pem file from step 2.2.5 to SCP. Make sure it has write permission)
                   ex:  sudo scp -i  <pemfile_path>  pk.pem ubuntu@<ELASTIC_IP>:usr/local/ec-tools
                        sudo scp -i  <pemfile_path>  cert.pem ubuntu@<ELASTIC_IP>:usr/local/ec-tools

    2.8) Automatic Elastic IP assignment on startup (Use a shell script in /etc/rc.local. Requires step 2.7 and 2.2.3  )
        2.8.1) sudo nano /etc/rc.local   and also to /etc/environment
        2.8.2) add the following
                export EC2_HOME=/usr/local/ec2-tools
                export JAVA_HOME=/usr/local/java
                export PATH=$PATH:$EC2_HOME/bin

                INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                USERDATA=$(curl -s http://169.254.169.254/latest/user-data)

                ELASTIC_IP=$(echo $USERDATA | awk 'BEGIN{RS="|";FS="="} /elastic-ip/ {print $2}')

                if [ -n "${ELASTIC_IP}" ]
                then
                ec2-associate-address -K /usr/local/ec2-tools/pk.pem -C /usr/local/ec2-tools/cert.pem -i $INSTANCE_ID $ELASTIC_IP
                else
                echo "No Elastic IP passed."
                fi
        2.8.3) Make sure to change EC2_HOME, JAVA_HOME, and paths of the pk.pem and cert.pem files to what you have in your system
        2.8.4) Now restart instance to make sure the change is working.
        2.8.5) add the following to /etc/environment


    2.9) Setup Tomcat (Requires 2.5)
        2.9.1) Find link to Tomcat 7 download from http://tomcat.apache.org/download-70.cgi
        2.9.2) execute the download link using "Wget" <tomcat _download_ link>
                ex: sudo wget http://mirror.cogentco.com/pub/apache/tomcat/tomcat-7/v7.0.37/bin/apache-tomcat-7.0.37.tar.gz
        2.9.3) Extract the Tar, and rename folder to "tomcat" > /usr/local/tomcat
        2.9.4) create user "tomcat" and group "tomcat"
                ex: sudo useradd tomcat
                    (this should create a group with the same name as well)
        2.9.5) change owner and group of the tomcat folder
                    ex: sudo chown -R tomcat tomcat
                        sudo chgrp -R tomcat tomcat
        2.9.6) add JAVA_HOME to catalina.sh (This should be first valid instruction)
                    ex: sudo nano /usr/local/tomcat/bin/catalina.sh
                        (add the following JAVA_HOME=/usr/local/java)
        2.9.7) add CATALINA_HOME to /etc/profile
               add CATALINA_HOME to PATH
        2.9.8) to start tomcat on Instance boot
                a) create file /etc/init.d/tomcat
                    #!/bin/bash
                    #
                    # tomcat
                    #
                    # chkconfig:
                    # description:  Start up the Tomcat servlet engine.

                    # Source function library.
                    # /etc/init.d/functions


                    RETVAL=$?
                    CATALINA_HOME="/usr/local/tomcat"
                    echo "Selected tomcat option : " $CATALINA_HOME
                    case "$1" in
                     start)
                            if [ -f $CATALINA_HOME/bin/startup.sh ];
                              then
                                echo $"Starting Tomcat"
                                sudo $CATALINA_HOME/bin/startup.sh
                            fi
                            ;;
                     stop)
                            if [ -f $CATALINA_HOME/bin/shutdown.sh ];
                              then
                                echo $"Stopping Tomcat"
                                sudo $CATALINA_HOME/bin/shutdown.sh
                            fi
                            ;;
                     restart)
                            echo $"Restarting Tomcat"
                            if [ -f $CATALINA_HOME/bin/shutdown.sh ];
                              then
                                echo $"Stopping Tomcat"
                                sudo $CATALINA_HOME/bin/shutdown.sh
                            fi

                            if [ -f $CATALINA_HOME/bin/startup.sh ];
                              then
                                echo $"Starting Tomcat"
                                sudo $CATALINA_HOME/bin/startup.sh
                            fi
                            ;;
                     *)
                            echo $"Usage: $0 {start|stop}"
                            exit 1
                            ;;
                     esac

                     exit $RETVAL

                b) Make sure CATALINE_HOME is specified correctly. Save file
                c) Set permissions to execute
                    ex:  sudo chmod 755 tomcat
                d) add the following to /etc/rc.local
                    sudo /etc/init.d/tomcat restart

        2.9.9) Access the webpage using port 8080 in the browser. You should see Tomcat welcome screen
        2.9.10) Add ESAPI resource folder setting to to /usr/local/tomcat/bin/catalina.sh
                    in Catalina.sh goto section - > elif [ "$1" = "start" ] ; then
                     Add -Dorg.owasp.esapi.resources="/etc/guests/props" \
                     to the start up section of script (there will be two places to add this change)
                     e.g,  eval \"$_RUNJAVA\" \"$LOGGING_CONFIG\" $JAVA_OPTS $CATALINA_OPTS \
                                -Djava.endorsed.dirs=\"$JAVA_ENDORSED_DIRS\" -classpath \"$CLASSPATH\" \
                                -Djava.security.manager \
                                -Djava.security.policy==\"$CATALINA_BASE/conf/catalina.policy\" \
                                -Dcatalina.base=\"$CATALINA_BASE\" \
                                -Dcatalina.home=\"$CATALINA_HOME\" \
                                -Djava.io.tmpdir=\"$CATALINA_TMPDIR\" \
                                -Dorg.owasp.esapi.resources="/etc/guests/props" \
                                org.apache.catalina.startup.Bootstrap "$@" start \
                                >> "$CATALINA_OUT" 2>&1 "&"

    3.0) Deprecated(see 3.4 for nginx) : Install Apache (this should include mod_jk and SSL support)  - Use
        3.0.1) sudo apt-get install libapache2-mod-jk
                Access the website now (port 80)- you should see default Apache page with following header
                "It works!"

        3.0.2) Enable SSL
                sudo a2enmod ssl
                sudo a2ensite default-ssl
        3.0.3) Create a folder /etc/apache2/ssl-certs
        3.0.4) Copy the .crt file and .key file to the folder created above ssl-certs
                ex: beta.kensenjohn.com.crt
                    beta.kensenjohn.com.key
        3.0.5) Add following lines to /etc/apache2/sites-enabled/default-ssl -> restart apache
                        SSLCertificateFile    /etc/apache2/ssl-certs/beta.kensenjohn.com.crt
                        SSLCertificateKeyFile /etc/apache2/ssl-certs/beta.kensenjohn.com.key

        3.0.6) Accessing page should have the certificate data you uploaded. If self signed then it will throw the warning.

    3.1) Deprecated(see 3.4 for nginx) :  Adding Mod_jk to redirect call to Tomcat
        3.1.1) Create workers.properties file
                ex: sudo nano /etc/apache2/workers.properties
                3.1.1.a) Add the following properties
                            # Define 1 real worker named ajp13
                            worker.list=ajp13

                            # Set properties for worker named ajp13 to use ajp13 protocol,
                            # and run on port 8009
                            worker.ajp13.type=ajp13
                            worker.ajp13.host=localhost
                            worker.ajp13.port=8009
                            worker.ajp13.lbfactor=1



        3.1.2) Change the location of the worker propertes in file /etc/apache2/mods-available/jk.conf
                    ex: JkWorkersFile /etc/apache2/workers.properties
        3.1.3) Specify what URL to mount
                                            sudo nano default-ssl
                                            Add : JkMount /* ajp13



    3.2) Install Mysql
                3.2.8) Creating the XFS Filesystem
                           grep -q xfs /proc/filesystems || sudo modprobe xfs
                           sudo mkfs.xfs /dev/xvdf

                           If you see the following error
                                sudo: mkfs.xfs: command not found
                                then install xfsprogs
                                    sudo apt-get install xfsprogs

                            try again
                            sudo mkfs.xfs /dev/xvdf

                            echo "/dev/svdf /vol xfs noatime 0 0" | sudo tee -a /etc/fstab
                            sudo mkdir -m 000 /vol
                            sudo mount /vol

        3.2.1) Use wget to download tar version directly from Mysql site
        3.2.2) extract the tar and rename folder to desired name
        3.2.3) create user mysql and change user/group of folder to mysql
                sudo useradd mysql
                sudo chown -R mysql
                sudo chgrp -R mysql
        3.2.4)
                shell> chown -R mysql .
                shell> chgrp -R mysql .
                shell> scripts/mysql_install_db --user=mysql
                if you get the following error
                /usr/local/mysql/bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory
                execute the following command
                sudo apt-get install libaio1 libaio-dev
                shell> scripts/mysql_install_db --user=mysql
                shell> chown -R root .
                shell> chown -R mysql data
                # Next command is optional
                shell> cp support-files/my-medium.cnf /etc/my.cnf
                shell> bin/mysqld_safe --user=mysql &
                # Next command is optional
                shell> cp support-files/mysql.server /etc/init.d/mysql.server

                Make it look like Mysql which is running on new EBS is actually running on default server
                            echo "/vol/usr/local/mysql /usr/local/mysql     none bind" | sudo tee -a /etc/fstab
                            sudo mount /usr/local/mysql

                create the mysql command
                shell>  cd /usr/bin
                shell> ln -s /usr/local/mysql/bin/mysql mysql

                create the log folder
                shell> cd /var/log/
                shell> mkdir mysql
                shell> cd mysql
                shell> create a file in mysql.log
                shell> chown mysql:mysql mysql.log
                shell> sudo nano /etc/my.cnf
                add the following line
                [mysqld]
                log=/var/log/mysql.log

        3.2.5) to enable start of mysql when instance reboots
                add line to /etc/rc.local

                sudo /etc/init.d/mysql.server restart

        3.2.6) To allow remote access to mysql instance

        3.2.7) Creating EBS
                In the navigation pane, click Volumes.

                Above the upper pane, click Create Volume.

                In the Create Volume dialog box, in the Volume Type drop-down list, select Standard or Provisioned IOPS. For more information, see EBS Volume Types.

                In the Size box and GiB drop-down list, select the size of the volume (in GiB or TiB).

                For Provisioned IOPS volumes, in the IOPS box, enter the maximum number of input/output operations per second (IOPS) that the volume can support.

                In the Availability Zone drop-down list, select the availability zone in which to launch the instance. For more information, see Regions and Availability Zones

                To restore an Amazon EBS volume, in the Snapshot drop-down list, select the ID of the snapshot from which you are launching the volume. Skip this step if you aren't restoring an Amazon EBS volume.

                Attach the EBS to the EC2 instance.
                note down the path
                /dev/sdf

    3.3) Ec2 Firewall
            open the following
            SSH     22      0.0.0.0/0
            HTTP    80      0.0.0.0/0
            HTTPS   443     0.0.0.0/0
            Http*   8080    127.0.0.1/32

    3.4) Install nginx (This needs to be done if Apache is not installed)

            3.4.1)  sudo -s
                    nginx=stable # use nginx=development for latest development version
                    add-apt-repository ppa:nginx/$nginx
                    apt-get update
                    apt-get install nginx

            3.4.2) Start nginx :
                    sudo service nginx start

            3.4.3) If you see the following error
                       nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)

                   goto file : /etc/nginx/sites-enabled/default
                       add : ipv6only=on to line listen [::]:80 default_server;
                       ex: listen [::]:80 ipv6only=on  default_server;

    3.5) Enable ssl in nginx and redirect to Tomcat
            3.5.1) create a folder ssl-certs
                    /etc/ngnix/ssl-certs
            3.5.2) copy .crt and .key file to above folder
            3.5.3) edit /etc/ngnix/sites-enabled/default
                    uncomment the SSL section.
                    # HTTPS server
                    Port 443 section of server
            3.5.4)  Set path of certificate and key
                        ssl_certificate /etc/nginx/ssl-certs/beta.callseat.com.crt;
                        ssl_certificate_key /etc/nginx/ssl-certs/beta.callseat.com.key;

            3.5.5) to redirect to Tomcat at port 8080
                    Add the following to location

                    location / {
                         proxy_pass http://127.0.0.1:8080;
                    }

                     # redirect server error pages to the static page /50x.html
                     #
                     error_page 500 502 503 504 /50x.html;
                     location = /50x.html {
                            root /usr/share/nginx/html;
                     }
            3.5.6) edit the file 50x.html
                    delete all the existing lines. Add the following lines
                        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
                        <html xmlns="http://www.w3.org/1999/xhtml">
                                <head>
                                <meta http-equiv="Content-Type" content="text/html; charset=utf-8">


                                <link type="text/css" rel="stylesheet" href="/web/css/style.css" />

                                        <title>Callseat</title>
                        </head>
                        <body>
                            <div class="navbar" style="background-image: none; background-color: RGBA(0,132,0,0.40); padding-bottom:6px; height: 49px;" id="nav_bar" >
                                <div class="blank_scratch_area" style="padding:5px;">
                                    <div class="row"><div class="span2"><div class="logo">&nbsp;</div></div></div>
                                </div>
                            </div>
                            <div class="blank_scratch_area">
                                <h1>Uh Oh! We were unable to complete your request. Please try again.</h1>
                            </div>
                        </body>

                        <div class="blank_scratch_area" style="padding:5px;text-align:right;font-size:75%; color:#37291C; margin : 0px; clear:both ">
                                &copy2013 - Smarasoft Inc
                        </div>
                        </html>


    3.6) Setting up Application Environment
            3.6.1) deploy JSP/Img/CSS/JS
            3.6.2) deploy class files
            3.6.3) deploy jar files to the lib folder
            3.6.4) deploy prop files to /etc/guests
            3.6.5) deploy log4j.properties from WEB-INF folder
            3.6.6) setup DB Connection - the IP address must be same as MYSQL instance
                    /TOMCATHOME/conf/Catalina/localhost/ROOT.xml
                    <Context path="/"
                            antiResourceLocking="false" >
                             <Resource name="jdbc/guestadmin"  auth="Container"
                                  type="javax.sql.DataSource"
                                  username="appadmin"
                                  password="FD3C08EEE89Ftestmystrength"
                                  driverClassName="com.mysql.jdbc.Driver"
                                  url="jdbc:mysql://54.225.134.18:3306/guestadmin?autoReconnect=true"
                                  maxActive="15"  maxIdle="3"
                                    testWhileIdle="true"
                                  testOnBorrow="true"
                                  testOnReturn="false"
                                  validationQuery="SELECT 1"
                                  validationInterval="30000"
                                  timeBetweenEvictionRunsMillis="30000"/>
                    </Context>

                    make sure entry into web.xml
                      <resource-ref>
                            <description>
                                Resource reference to a factory for java.sql.Connection
                                instances that may be used for talking to a particular
                                database that is configured in the
                                configurartion for the web application.
                            </description>
                            <res-ref-name>
                                jdbc/guestadmin
                            </res-ref-name>
                            <res-type>
                                javax.sql.DataSource
                            </res-type>
                            <res-auth>
                                Container
                            </res-auth>
                        </resource-ref>


            3.6.07) Setup Amazon security keys  (/etc/guests/props/application.prop)
                    3.6.7.1) Login into AWS dashboard > User Name > Security Credentials
                    3.6.7.2) Follow steps in 2.6) to only generate Access Key. This will be used for Amazon email setup.
                    3.6.7.3) copy and paste the Amazon Access key and Amazon Secret key to prop file

            3.6.08) Setup Amazon Email - SES
            3.6.09) execute table scripts - make sure the "From email addresses" are correct.
            3.6.10) setup TWilio. note down the Account SID and Auth Token in (/etc/guests/props/application.prop)
                    create two demo numbers
                    Assign the URLs for the demo numbers
                    set the following parameters for Voice prompts
                        domain=23.21.184.233
                        voice_recording_domain=https://s3.amazonaws.com/dev.calls.com/voice/
                        application_domain=https://23.21.184.233

            3.6.11) Create AMazon S3 bucket
                        a) Goto Dashboard.
                        b) Select S3 > Create Bucket - name it
                        c) create a folder


